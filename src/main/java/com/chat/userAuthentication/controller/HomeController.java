/**
 * The HomeController class in the userAuthentication package handles various user authentication endpoints and operations.
 */
package com.chat.userAuthentication.controller;

import com.chat.userAuthentication.request.EmailOtpRequest;
import com.chat.userAuthentication.request.LoginRequest;
import com.chat.userAuthentication.request.UserCreation;
import com.chat.userAuthentication.request.ValidateOtpRequest;
import com.chat.userAuthentication.response.BaseResponse;
import com.chat.userAuthentication.service.HomeManager;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@RestController
@RequestMapping("/user")
public class HomeController {

    private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

    @Autowired
    private HomeManager homeManager;

    //
    @GetMapping("/hello")
    public String getResult(){
        return "hello";
    }

    /**
     * This Java function handles a POST request for user login and returns a response entity with the login information.
     *
     * @param loginRequest The `loginRequest` parameter is an object of type `LoginRequest` which is being passed as the
     * request body in the POST request. It is annotated with `@RequestBody` to indicate that the data for this parameter
     * should be taken from the request body. Additionally, it is annotated with `@
     * @param httpRequest The `httpRequest` parameter in the `getLogin` method is of type `HttpServletRequest`. It
     * represents the HTTP request that was made to the server and contains information such as request headers,
     * parameters, and body. In this method, it is being used to access information from the incoming HTTP request.
     * @return A ResponseEntity object containing a BaseResponse is being returned.
     */
    @PostMapping(EndPointReferrer.LOGIN)
    public ResponseEntity<BaseResponse> getLogin(
            @Validated(value = {LoginRequest.FetchGrp.class})
            @RequestBody @NotNull LoginRequest loginRequest,
            HttpServletRequest httpRequest) throws Exception {

        logger.debug("{} controller started",EndPointReferrer.LOGIN);

        return new ResponseEntity<>(homeManager.login(loginRequest, httpRequest), HttpStatus.OK);

    }

    /**
     * This function creates a new user by calling the `createUser` method in the `homeManager` class and returns a
     * ResponseEntity with the result.
     *
     * @param userCreation The `userCreation` parameter in the `createUser` method is of type `UserCreation` and is
     * annotated with `@RequestBody` and `@NotNull`. This parameter is used to pass the user creation data to the method
     * when a new user is being created.
     * @return The method `createUser` is returning a `ResponseEntity<BaseResponse>` object. This object contains the
     * response entity with the result of creating a new user. If successful, it will return a response entity with HTTP
     * status code 200 (OK) and the created user information. If an exception occurs, the method catches the exception and
     * logs an error message, but it does not return any response in
     */
    @PostMapping(EndPointReferrer.NEW_USER)
    public ResponseEntity<BaseResponse> createUser(
            @RequestBody @NotNull UserCreation userCreation) throws Exception {
        try {
            logger.debug("{} controller started",EndPointReferrer.NEW_USER);

            return new ResponseEntity<>(homeManager.createUser(userCreation), HttpStatus.OK);

        } catch (Exception e) {
            logger.error("Exception occurred in request with cause - ");
        }
        return null;

    }

    /**
     * This function sends a forgot password email OTP and logs any exceptions that occur.
     *
     * @param emailOtpRequest The `sendForgotEmailOtp` method is a POST mapping that handles requests to send a forgot
     * password email OTP. It takes in an `EmailOtpRequest` object as a request body. The `homeManager.sendForgotOtp`
     * method is called with the `emailOtpRequest`
     * @return The method is returning a ResponseEntity object with a BaseResponse object inside it. The BaseResponse
     * object is generated by the homeManager.sendForgotOtp(emailOtpRequest) method. The HTTP status of the response is
     * HttpStatus.OK.
     */
    @PostMapping(EndPointReferrer.FORGET_PASSWORD)
    public ResponseEntity<BaseResponse> sendForgotEmailOtp(
            @RequestBody @NotNull EmailOtpRequest emailOtpRequest) {
        try {
            logger.debug("{} controller started",EndPointReferrer.FORGET_PASSWORD);

            return new ResponseEntity<>(homeManager.sendForgotOtp(emailOtpRequest), HttpStatus.OK);

        } catch (Exception e) {
            logger.error("Exception occurred in request with cause - ");
        }
        return null;

    }

    /**
     * This function validates an email OTP and resets the password, returning a response entity.
     *
     * @param validateOtpRequest The `validateOtpRequest` parameter is of type `ValidateOtpRequest` and is annotated with
     * `@RequestBody` and `@NotNull`. This means that the parameter will be populated with the data from the request body
     * and it cannot be null. The `validateEmailOtp` method is
     * @return A `ResponseEntity<BaseResponse>` object is being returned from the `validateEmailOtp` method.
     */
    @PostMapping(EndPointReferrer.VALIDATE_EMAIL_OTP)
    public ResponseEntity<BaseResponse> validateEmailOtp(
            @RequestBody @NotNull ValidateOtpRequest validateOtpRequest) {
        try {
            logger.debug("{} controller started",EndPointReferrer.VALIDATE_EMAIL_OTP);

            return new ResponseEntity<>(homeManager.validateOtpAndResetPassword(validateOtpRequest), HttpStatus.OK);

        } catch (Exception e) {
            logger.error("Exception occurred in request with cause - ");
        }
        return null;

    }

    /**
     * This Java function handles a POST request to validate an OTP and returns a ResponseEntity with the result.
     *
     * @param validateOtpRequest The `validateOtpRequest` parameter is of type `ValidateOtpRequest`, which is annotated
     * with `@RequestBody` and `@NotNull`. This means that the `validateOtpRequest` object will be populated with the
     * request body data from the incoming HTTP request, and it cannot be null
     * @return The method is returning a `ResponseEntity<BaseResponse>` object.
     */
    @PostMapping(EndPointReferrer.VALIDATE_VERIFICATION_OTP)
    public ResponseEntity<BaseResponse> verifyOtp(
            @RequestBody @NotNull ValidateOtpRequest validateOtpRequest) {
        try {
            logger.debug("{} controller started",EndPointReferrer.VALIDATE_VERIFICATION_OTP);

            return new ResponseEntity<>(homeManager.validateOtp(validateOtpRequest), HttpStatus.OK);

        } catch (Exception e) {
            logger.error("Exception occurred in request with cause - ");
        }
        return null;

    }

    /**
     * This Java function retrieves a token from a Redis cache based on a given key.
     *
     * @param key The `key` parameter in the `getTokenByKey` method is a path variable annotated with `@PathVariable`. It
     * is of type `String` and is validated using `@NotNull` and `@Valid` annotations to ensure that it is not null and
     * meets any validation constraints specified for the `String
     * @return The method `getTokenByKey` is being called with the `key` parameter, and the result is being returned as a
     * ResponseEntity with a BaseResponse object and HttpStatus OK.
     */
    @GetMapping(EndPointReferrer.GET_REDIS_CACHE)
    public ResponseEntity<BaseResponse> getTokenByKey(@PathVariable("sKey") @NotNull @Valid String key) {
        return new ResponseEntity<>(homeManager.getTokenByKey(key), HttpStatus.OK);
    }

    /**
     * This Java function uses a GET request to clear a token from a Redis cache based on a specified key.
     *
     * @param key The `key` parameter in the `clearTokenByKey` method is a path variable that represents the key used to
     * clear a specific token from the Redis cache. This key is passed in the URL path when making a request to this
     * endpoint.
     * @return The method `clearTokenByKey` is being called with the `key` parameter, and the result is being returned as a
     * `ResponseEntity` with a `BaseResponse` object and an HTTP status of OK (200).
     */
    @GetMapping(EndPointReferrer.CLEAR_REDIS_CACHE)
    public ResponseEntity<BaseResponse> clearTokenByKey(@PathVariable("sKey") @NotNull @Valid String key) {
        return new ResponseEntity<>(homeManager.clearTokenByKey(key), HttpStatus.OK);
    }
}
